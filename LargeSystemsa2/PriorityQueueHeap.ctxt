#BlueJ class context
comment0.params=
comment0.target=PriorityQueueHeap()
comment0.text=\n\ PriorityQueueHeap\ Constructor\n\ The\ basic\ object\ constructor.\ \n
comment1.params=priority\ element
comment1.target=void\ enqueue(java.lang.Comparable,\ java.lang.Object)
comment1.text=\n\ enqueue\n\ Takes\ an\ object,\ wraps\ it\ in\ a\ node\ and\ stores\ it\ in\ the\ heap.\n\ Given\ the\ ordinal\ nature\ of\ the\ queue,\ it\ will\ be\ stored\ according\n\ to\ its\ priority.\ \n\ @param\ priority\ The\ Comparable\ object\ being\ used\ to\ compare\ priority.\n\ @param\ element\ The\ data\ being\ stored\ along\ with\ the\ key\ value.\ \n
comment10.params=
comment10.target=void\ addToendLoc()
comment10.text=\n\ addToendLoc\n\ Increments\ the\ endLoc\ variable\ to\ indicate\ the\ addition\ of\ \n\ another\ element\ being\ added\ to\ the\ heap.\ \n
comment11.params=loc
comment11.target=void\ bubbleUp(int)
comment11.text=\n\ bubbleUp\n\ Compares\ the\ current\ element\ to\ its\ parent\ and\ swaps\ until\ \n\ all\ parent\:child\ nodes\ are\ in\ height\ order.\ Higher\ priority\ \n\ elements\ rise\ to\ the\ top,\ thus\ the\ name.\ \n\ @param\ loc\ -\ The\ element\ upon\ which\ to\ perform\ the\ bubble-up\ comparison.\ \n
comment12.params=
comment12.target=void\ bubbleDown()
comment12.text=\n\ bubbleDown\n\ Used\ in\ node\ removal\ in\ a\ priority\ queue\:\ The\ last\ element\ of\ the\ queue\ \n\ is\ copied\ over\ the\ element\ with\ the\ highest\ priority\ (thereby\ removing\ it)\n\ and\ then\ compared\ with\ its\ child\ nodes.\ Following\ the\ comparison,\ it\ is\ \n\ swapped\ with\ the\ node\ with\ the\ highest\ priority\ if\ it\ is\ of\ a\ lower\ priority\n
comment13.params=parentNode\ parent\ childNode\ child
comment13.target=void\ swapDown(PriorityQueueHeap.Node,\ int,\ PriorityQueueHeap.Node,\ int)
comment13.text=\n\ swapDown\n\ A\ method\ which\ swaps\ the\ nodes\ around,\ taking\ Parent\ and\ placing\ it\ \n\ where\ Child\ was\ in\ the\ queue.\ \n\ @param\ parentNode\ The\ Parent\ node\ being\ swapped\ with\ the\ child\ node.\n\ @param\ parent\ The\ location\ of\ the\ parent\ node\ as\ an\ integer\n\ @param\ childNode\ The\ child\ node\ being\ swapped\n\ @param\ child\ the\ location\ of\ the\ child\ node\ as\ an\ integer\n
comment2.params=
comment2.target=void\ dequeue()
comment2.text=\n\ dequeue\n\ removes\ the\ item\ from\ the\ queue\ with\ the\ highest\ priority.\ \n\ @throws\ EmptyQueueException\ Throws\ exception\ if\ the\ queue\ is\ empty.\ \n
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\n\ isEmpty\n\ Returns\ true\ if\ the\ object\ is\ empty.\n\ @return\ Returns\ true\ of\ the\ object\ is\ empty.\ \n
comment4.params=
comment4.target=java.lang.Object\ front()
comment4.text=\n\ front\n\ returns\ the\ object\ at\ the\ front\ of\ the\ priority\ queue.\n\ @return\ The\ object\ with\ the\ highest\ priority\n\ @throws\ EmptyQueueException\ Throws\ exception\ if\ the\ queue\ is\ empty.\ \ \n
comment5.params=
comment5.target=int\ length()
comment5.text=\n\ length\n\ Returns\ the\ number\ of\ elements\ in\ the\ priority\ queue.\n\ @return\ the\ length\ of\ the\ queue\n
comment6.params=loc
comment6.target=int\ parent(int)
comment6.text=\n\ parent\n\ Given\ the\ integer\ location\ of\ a\ node,\ return\ its\ parent's\ \n\ location\ as\ an\ integer.\ If\ given\ the\ root\ already,\ returns\ 0.\ \n\ \n\ @param\ loc\ -\ the\ integer\ location\ of\ the\ node\ whose\ \n\ parent\ is\ to\ be\ returned.\ \n\ @return\ the\ parent\ of\ the\ node\ as\ given\ by\ an\ integer\n
comment7.params=loc
comment7.target=boolean\ isRoot(int)
comment7.text=\n\ isRoot\n\ Returns\ True\ if\ integer\ location\ is\ root;\n\ @param\ loc\ -\ the\ integer\ locaiton\ of\ the\ node\ being\ tested\ for\ being\ root.\ \n\ @return\ Returns\ true\ if\ the\ given\ node\ is\ the\ root\ of\ the\ heap.\n
comment8.params=loc
comment8.target=int\ lChild(int)
comment8.text=\n\ lChild\n\ Given\ the\ integer\ location\ of\ a\ node,\ returns\ its\ left\ child.\ \n\ If\ child\ not\ present,\ returns\ the\ same\ value.\ \n\ @return\ The\ left\ child\ location\ in\ the\ heap.\ \n
comment9.params=loc
comment9.target=int\ rChild(int)
comment9.text=\n\ rChild\n\ Given\ the\ integer\ location\ of\ a\ node,\ returns\ its\ right\ child.\ \n\ @return\ The\ right\ child\ location\ in\ the\ heap.\n
numComments=14
